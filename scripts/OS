#!/bin/bash

# MIT license
# Copyright 2016-2017 Sergej Alikov <sergej.alikov@gmail.com>

# This script allows you to update local or remote system(s)
# like this:
#
#   OS update host1.example.com user@host2.example.com:22000
#   OS update --local
#


set -eu
set -o pipefail

multiplexer_ensure_installed () {
    local first_multiplexer
    if ! multiplexer_present >/dev/null; then
        read -r first_multiplexer < <(supported_multiplexers)
        packages_ensure present "${first_multiplexer}"
    fi
}


os_update () {

    multiplexer_ensure_installed

    case "${FACT_OS_NAME}" in
        "Fedora")
            run_in_multiplexer "dnf -y update; exit"
            ;;
        "RHEL"|"CentOS")
            run_in_multiplexer "yum -y update; exit"
            ;;
        "Debian"|"Ubuntu")
            run_in_multiplexer "apt-get -y update && apt-get -y dist-upgrade; exit"
            ;;
    esac
}


display_usage_and_exit () {
    >&2 cat <<EOF
Usage ${0} [OPTIONS] COMMAND ([[<[USER@]ADDRESS[:PORT]>] ...] | --local)

COMMANDS:
  update  Update the operating system on local host or one or more remote targets.

OPTIONS:

  -i, --inventory <FILE>  Load list of targets from the FILE
  -v, --verbose           Enable verbose output
  --local                 Do the local call only. Any remote targets will
                          be ignored.

EOF
}


if [[ -n "${BASH_SOURCE[0]:-}" && "${0}" = "${BASH_SOURCE[0]}" ]]; then

    # shellcheck disable=SC1091
    source automated-extras-config.sh

    if [[ "${#}" -gt 0 ]]; then
        case "${1}" in
            update)
                COMMAND='os_update'
                ;;
            *)
                >&2 echo "Unsupported command!"
                exit 1
                ;;
        esac

        shift

        automated.sh -l "${BASH_SOURCE[0]}" -l "${AUTOMATED_EXTRAS_LIBDIR}" -c "${COMMAND}" -s "${@}"
    else
        display_usage_and_exit
    fi
fi
